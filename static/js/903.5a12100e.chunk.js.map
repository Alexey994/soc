{"version":3,"file":"static/js/903.5a12100e.chunk.js","mappings":"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","sources":["Hook/withAuthRedirect.js","webpack://soc/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Message/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) =>( {\r\n    isAuth: state.auth.isAuth });\r\n\r\n\r\n    export const withAuthRedirect = (Component) => {\r\n        class RedirectComponent extends React.Component {\r\n            render(){\r\n                if(this.props.isAuth){\r\n                    return <Component {...this.props}/>\r\n                }else if(!this.props.isAuth && !this.props.router){\r\n                    return <Navigate to='/login'/>\r\n                }else {\r\n                    if(!this.props.isAuth && !this.props.router.params.userId){\r\n                        return <Navigate to='/login'/>\r\n                    } else {\r\n                        if(!this.props.isAuth && this.props.router.params.userId) return <Component {...this.props}/>\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return compose(connect(mapStateToPropsForRedirect, {}))((RedirectComponent));\r\n    }","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__L76fK\",\"dialogsItems\":\"Dialogs_dialogsItems__wIHM9\",\"active\":\"Dialogs_active__1147J\",\"messages\":\"Dialogs_messages__q-yCX\"};","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={`${s.dialog} ${s.active}`}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.dialog}>{props.message}</div>;\r\n};\r\n\r\n\r\n\r\nexport default Message;\r\n","import React from \"react\"\r\nimport { Field , reduxForm } from \"redux-form\"\r\nimport { required, maxLengthCreator, minLengthCreator } from \"../../utils/validators\"\r\nimport { FormControl} from \"../../common/FormsControl/FormsControl\"\r\n\r\nconst maxLength10 = maxLengthCreator(4);\r\nconst minLength3 = minLengthCreator(3);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n         <div>\r\n             <Field child=\"input\" component={FormControl} validate={[required,maxLength10, minLength3]}  name={\"newMessageBody\"} placeholder={\"Enter your message\"} type=\"text\"/>\r\n         </div>\r\n              <div>\r\n                  <button>Send</button>\r\n              </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({form : \"dialog-add-message-form\"})(AddMessageForm)\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport AddMessageForm from \"./Message/AddMessageForm\";\r\n\r\n\r\n//import { sendMessageCreator, updateNewMessageBodyCreator } from \"../../Redux/dialogsReducer\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElement = state.dialogs.map((d) => (\r\n    <DialogItem name = {d.name} key={d.id} id ={d.id} />\r\n  ));\r\n\r\n  let messagesElement = state.messages.map((m) => (\r\n    <Message message = {m.message} key={m.id} />\r\n  ));\r\n\r\nlet addNewMessage = (values) => {\r\n  props.sendMessage(values.newMessageBody)\r\n  alert(values.newMessageBody)\r\n}\r\n\r\nif(!props.isAuth) return <Navigate to={'/login'}/>;\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElement}</div>\r\n      <div>\r\n        <div className={s.messages}>\r\n          <div>{messagesElement}</div>\r\n      </div>\r\n    </div>\r\n <AddMessageForm onSubmit={addNewMessage}/>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n\r\n","import { sendMessageCreator} from \"../../Redux/dialogsReducer\";\r\nimport {connect} from 'react-redux'\r\nimport { withAuthRedirect } from \"../../Hook/withAuthRedirect\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { compose } from \"redux\";\r\n\r\n/*const DialogsContainer = (props) => {\r\n  return (\r\n    <storeContext.Consumer>\r\n      { (store)=>{\r\n\r\nlet state = store.getState().dialogsPage;\r\n\r\n  \r\n  let onSendMessageClick = () => {\r\n   store.dispatch(sendMessageCreator());\r\n  }\r\n\r\n  let onNewMessageChange = (body) => {\r\n   store.dispatch(updateNewMessageBodyCreator(body));\r\n  }\r\n      \r\n   return <Dialogs \r\n   updateNewMessageBody={onNewMessageChange} \r\n   sendMessage={onSendMessageClick}\r\n   dialogsPage={state}/>\r\n      }}\r\n   </storeContext.Consumer>\r\n  );\r\n};\r\n*/\r\nlet mapStateToProps = (state) => {\r\nreturn {\r\n  dialogsPage: state.dialogsPage,\r\n     }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect,\r\n)(Dialogs);"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","React","render","this","props","_jsx","router","params","userId","Navigate","to","compose","connect","path","id","className","concat","s","dialog","active","children","NavLink","name","message","maxLength10","maxLengthCreator","minLength3","minLengthCreator","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","child","component","FormControl","validate","required","placeholder","type","dialogsPage","dialogsElement","dialogs","map","d","DialogItem","messagesElement","messages","m","Message","dialogsItems","AddMessageForm","values","sendMessage","newMessageBody","alert","dispatch","sendMessageCreator","Dialogs"],"sourceRoot":""}